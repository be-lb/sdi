# -*- coding: utf-8 -*-
# Generated by Django 1.11.4 on 2018-01-16 14:27
from __future__ import unicode_literals

from django.db import migrations

from api.models import UserMap
from api.models import LayerInfo


def is_point(s):
    return s['kind'].split('-')[0] == 'point'


def is_line(s):
    return s['kind'].split('-')[0] == 'line'


def is_polygon(s):
    return s['kind'].split('-')[0] == 'polygon'


def is_simple(s):
    return s['kind'].split('-')[1] == 'simple'


def is_cont(s):
    return s['kind'].split('-')[1] == 'continuous'


def is_disc(s):
    return s['kind'].split('-')[1] == 'discrete'


def patch_style(s):
    s['label']['en'] = ''


def patch_point_label(s):
    if 'label' in s:
        s['label']['propName']['en'] = ''


def un_patch_style(s):
    s['label'].pop('en', None)


def unpatch_point_label(s):
    if 'label' in s:
        s['label']['propName'].pop('en', None)


def forwards_func(apps, schema_editor):
    LayerInfo = apps.get_model("api", "LayerInfo")
    db_alias = schema_editor.connection.alias
    for li in LayerInfo.objects.using(db_alias).all():
        s = li.style
        if is_point(s):
            patch_point_label(s)
        if is_cont(s):
            for si in s['intervals']:
                patch_style(si)
        elif is_disc(s):
            for si in s['groups']:
                patch_style(si)
        li.style = s
        li.save()


def reverse_func(apps, schema_editor):
    LayerInfo = apps.get_model("api", "LayerInfo")
    db_alias = schema_editor.connection.alias
    for li in LayerInfo.objects.using(db_alias).all():
        s = li.style
        if is_point(s):
            unpatch_point_label(s)
        if is_cont(s):
            for si in s['intervals']:
                un_patch_style(si)
        elif is_disc(s):
            for si in s['groups']:
                un_patch_style(si)
        li.style = s
        li.save()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0010_messagerecord_en'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func),
    ]
